import 'dart:async';
import 'package:async/async.dart' show unawaited;                // unawaited()
import 'package:flutter/material.dart';
import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:flutter_background_service_android/flutter_background_service_android.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:audio_service/audio_service.dart';
import 'package:just_audio/just_audio.dart';

/* 1. AudioHandler ‚Äî‚Äî ph√°t file mp3 l·∫∑p v√¥ h·∫°n */
@pragma('vm:entry-point')
class AlarmAudioHandler extends BaseAudioHandler {
  final _player = AudioPlayer();
  bool _prepared = false;

  Future<void> _prepare() async {
    if (_prepared) return;
    await _player.setAsset('assets/sounds/alarm.mp3');
    await _player.setLoopMode(LoopMode.one);
    _prepared = true;
  }

  Future<void> playLoop() async {
    await _prepare();
    await _player.seek(Duration.zero);
    await _player.play();
  }

  @override
  Future<void> stop() async {
    await _player.stop();
    await _player.dispose();
    await AudioService.stop();
    await super.stop();
  }

  @override
  Future<void> onTaskRemoved() => stop();
}

/* 2. H√†m ti·ªán √≠ch g·ª≠i notification to√†n m√†n h√¨nh */
Future<void> _showFullScreenNotification({
  required String title,
  required String body,
  required String payload,
}) async {
  final plugin = FlutterLocalNotificationsPlugin();

  // Kh·ªüi t·∫°o plugin n·∫øu isolate ch∆∞a init
  const initSettings =
      InitializationSettings(android: AndroidInitializationSettings('ic_launcher'));
  await plugin.initialize(initSettings);

  // ƒê·∫£m b·∫£o channel t·ªìn t·∫°i, IMPORTANCE_MAX
  const channel = AndroidNotificationChannel(
    'alarm_channel',
    'Alarm Background Service',
    description: 'Th√¥ng b√°o c·∫£nh b√°o to√†n m√†n h√¨nh',
    importance: Importance.max,
  );
  await plugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

  // G·ª≠i notification full-screen
  const details = NotificationDetails(
    android: AndroidNotificationDetails(
      'alarm_channel',
      'Alarm Background Service',
      channelDescription: 'Th√¥ng b√°o c·∫£nh b√°o to√†n m√†n h√¨nh',
      importance: Importance.max,
      priority: Priority.high,
      category: AndroidNotificationCategory.alarm,
      fullScreenIntent: true,
      ticker: 'ticker',
    ),
  );

  await plugin.show(999, title, body, details, payload: payload);
}

/* 3. Entry-point c·ªßa isolate background-service */
@pragma('vm:entry-point')
Future<void> serviceEntryPoint(ServiceInstance service) async =>
    runZonedGuarded(() async {
      // ƒêƒÉng k√Ω binding (v√† plugin n·∫øu Flutter 3.13+)
      WidgetsFlutterBinding.ensureInitialized();
      // DartPluginRegistrant.ensureInitialized(); // ‚Üê B·ªè ghi ch√∫ n·∫øu class c√≥ s·∫µn trong SDK c·ªßa b·∫°n

      if (service is AndroidServiceInstance) {
        await service.setForegroundNotificationInfo(
          title: 'üîä C·∫£nh b√°o m·∫•t ƒëi·ªán',
          content: '·ª®ng d·ª•ng ƒëang ch·∫°y n·ªÅn ƒë·ªÉ ph√°t chu√¥ng.',
        );

        service.on('stopService').listen((_) async {
          await AudioService.stop();
          service.stopSelf();
        });
      }

      // Kh·ªüi AudioService & ph√°t chu√¥ng
      final handler = await AudioService.init(
        builder: () => AlarmAudioHandler(),
        config: const AudioServiceConfig(
          androidNotificationChannelId: 'alarm_channel',
          androidNotificationChannelName: 'Alarm Background Service',
          androidNotificationOngoing: true,
        ),
      ) as AlarmAudioHandler;

      unawaited(handler.playLoop());

      // G·ª≠i notification to√†n m√†n h√¨nh
      await _showFullScreenNotification(
        title: '‚ö†Ô∏è Thi·∫øt b·ªã m·∫•t k·∫øt n·ªëi',
        body: 'Ch·∫°m ƒë·ªÉ t·∫Øt b√°o ƒë·ªông',
        payload: 'open_alert',
      );

      service.invoke('log', {'msg': 'üîÅ Alarm background service started'});
    }, (e, st) {
      service.invoke('log', {'error': e.toString(), 'stack': st.toString()});
    });
